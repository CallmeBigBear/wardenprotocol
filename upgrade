#!/bin/bash
# AUTO UPGRADE BY BBear
if [[ $# -lt 1 ]]; then
    echo "ERROR: Enter new version | e.g. 14"
    exit
fi
API=$(curl -m 5 -s https://api.warden.innode.tech/cosmos/gov/v1/proposals)
VOTE_ID_LASTEST=$(echo $API | jq -r .pagination.total)
VOTE_STATUS=$(echo $API | jq -r '.proposals[] | select(.id == "'$VOTE_ID_LASTEST'").status')
DEST_HEIGHT=$(echo $API | jq -r '.proposals[] | select(.id == "'$VOTE_ID_LASTEST'").messages[].plan.height')
[[ $VOTE_STATUS != "PROPOSAL_STATUS_PASSED" ]] && exit

GREEN="\e[1m\e[1;32m" # green color
RED="\e[1m\e[1;31m" # red color
BLUE='\033[0;34m'   # blue color
YELLOW="\e[1m\e[1;33m"  # yellow color
NC="\e[0m"          # no color
BINARY_VERSION=$1
#DEST_HEIGHT=$2
BINARY_LINK="https://github.com/warden-protocol/wardenprotocol/releases/download/v$1/wardend-$1-linux-amd64"
RPC_PORT=$(grep -m 1 -oP '^laddr = "\K[^"]+' "$HOME/.warden/config/config.toml" | cut -d ':' -f 3)
BINARY_LOCATION="$(which wardend)"
if command -v jq &> /dev/null; then
    echo "jq INSTALLED"
else
    echo "INSTALLING jq..."
    apt update && apt install jq -y
fi

wget -O wardend $BINARY_LINK > /dev/null
  chmod +x wardend
  echo -e "${YELLOW}\n############################################\nLOCATION FOUND: $BINARY_LOCATION \n\nOLD VERSION:"
  wardend version
  echo -e "\nNEW VERSION:"
  ./wardend version
  echo -e "############################################\n ${NC}"
  echo "Waiting 15s..."
  sleep 15
  if [ ! -z "$2" ]; then
    echo -e "${YELLOW}HEIGHT TO UPGRADE: $DEST_HEIGHT ${NC}"
    while :
    do
      CURRENT_HEIGHT=$(curl -s localhost:$RPC_PORT/status | jq -r .result.sync_info.latest_block_height)
      [[ $CURRENT_HEIGHT == $DEST_HEIGHT ]] && mv wardend $BINARY_LOCATION && systemctl restart wardend && echo "UPGRADE SUCCESSFULLY!!!" && break
      echo Block left: $((DEST_HEIGHT - CURRENT_HEIGHT))
      sleep 15
    done
  else
    mv wardend $BINARY_LOCATION && systemctl restart wardend && echo "UPGRADE SUCCESSFULLY!!!"
  fi
fi
